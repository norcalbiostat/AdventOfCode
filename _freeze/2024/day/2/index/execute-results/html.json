{
  "hash": "7f3429f6bde8a0c7a1b585c81369d8b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2024: Day 02 Red-Nosed Reports\"\ndate: 2024-12-02\ncategories:\n  - loops\n  - tidyr\n  - NAs\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2024/day/02)\n\n# Input data\nEach report has varying number of levels, so I used readLines to import the whole thing in as a data frame, and then used `separate_wider_delim` to split the character vector out into columns. I don't know the full length of rows, so i chose a large value and then dropped columns containing no data. Then convert to a numeric matrix. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aochelpers)\ninput <- readLines(\"~/GitHub/AdventOfCode/2024/day/2/input\") |> data.frame()\nhead(input)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  readLines....GitHub.AdventOfCode.2024.day.2.input..\n1                                      74 76 78 79 76\n2                                      38 40 43 44 44\n3                                      1 2 4 6 8 9 13\n4                                65 68 70 72 75 76 81\n5                                   89 91 92 95 93 94\n6                                   15 17 16 18 19 17\n```\n\n\n:::\n\n```{.r .cell-code}\ninput2 <- tidyr::separate_wider_delim(input, \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcols = everything(), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdelim = \" \",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnames = paste0(\"rpt\", 1:8), \n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoo_few = \"align_start\")\n\ninput.num <- apply(input2, 2, as.numeric)\n\t\t\t\n# apply(input2, 2, function(x)mean(is.na(x))) # identify blank columns\n```\n:::\n\n\n# TLDR; Solutions\n\n## Part 1 ⭐\n\n::: {.callout-danger}\n### ❓  How many reports are safe?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput.diffmat <- matrix(NA, nrow = NROW(input.num), ncol = NCOL(input.num)-1)\n\nfor(i in 1:NROW(input.num)){\n\tfor(j in 2:NCOL(input.num)){\n\t\tinput.diffmat[i, j-1] <- input.num[i, j]-input.num[i, j-1]\n\t}\n}\n\nflag.size <- input.diffmat ==0 | abs(input.diffmat) > 3\n# adjusted here for missing values\nunsafe <- rowSums(flag.size, na.rm = TRUE) >0\n\nfor(i in 1:NROW(input.diffmat)){\n\tif(unsafe[i] == FALSE){\n\t\t# adjusted for missing values\n\t\tunsafe[i] <- length(rle(input.diffmat[i,which(!is.na(input.diffmat[i,]))]> 0)$lengths)>1\n\t}\n}\nsum(!unsafe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 257\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2 ⭐⭐\n\n::: {.callout-danger}\n### ❓  \n:::\n\n\n\n\n# Walkthrough / Explainer\n\n## Part 1\nFirst place to look for the chief is the Red-Nosed Reindeer nuclear fusion/fission plant. But they need help with some data crunching. \n\n:::{.callout-exa icon=true}\n**Example Data**\n\nOne line per report, one column per level. Example data has 6 reports with 5 levels each. \n\n::: {.cell}\n\n```{.r .cell-code}\nexa <- c(\"7 6 4 2 1\", \"1 2 7 8 9\", \"9 7 6 2 1\", \"1 3 2 4 5\", \"8 6 4 4 1\", \"1 3 6 7 9\") |>\n\tlines_to_matrix(split = ' ')\nclass(exa) <- \"numeric\"\nexa\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    7    6    4    2    1\n[2,]    1    2    7    8    9\n[3,]    9    7    6    2    1\n[4,]    1    3    2    4    5\n[5,]    8    6    4    4    1\n[6,]    1    3    6    7    9\n```\n\n\n:::\n:::\n\n:::\n\n_The Red-Nosed reactor safety systems can only tolerate levels that are A) either all increasing or all decreasing, or B) Any two adjacent levels differ by at least one and at most three._\n\nokay, so we need a difference between column j+1 and j. Easiest way would probably be to do a loop. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nexa.diffmat <- matrix(NA, nrow = NROW(exa), ncol = NCOL(exa)-1)\nfor(i in 1:NROW(exa)){\n\tfor(j in 2:NCOL(exa)){\n\t\texa.diffmat[i, j-1] <- exa[i, j]-exa[i, j-1]\n\t}\n}\nexa.diffmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]   -1   -2   -2   -1\n[2,]    1    5    1    1\n[3,]   -2   -1   -4   -1\n[4,]    2   -1    2    1\n[5,]   -2   -2    0   -3\n[6,]    2    3    1    2\n```\n\n\n:::\n:::\n\n\nNow to flag the unsafe rows based on size of difference. I want the result to be TRUE/FALSE for later indexing. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflag.size <- exa.diffmat ==0 | abs(exa.diffmat) > 3\nunsafe <- apply(flag.size, 1, sum)|> as.logical()\n```\n:::\n\n\nTo flag the sign changes, use `rle()` Run Length Encoding. If the length of the `lengths` output is greater than 1, then there was a sign change. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrle(exa.diffmat[6,]>0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRun Length Encoding\n  lengths: int 4\n  values : logi TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nrle(exa.diffmat[6,]>0)$lengths\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(rle(exa.diffmat[6,]>0)$lengths)>1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nOnly run this on the rows that haven't already been flagged as unsafe\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:NROW(exa.diffmat)){\n\tif(unsafe[i] == FALSE){\n\t\tunsafe[i] <- length(rle(exa.diffmat[i,]>0)$lengths)>1\n\t}\n}\n\nunsafe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n!unsafe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\nnumber of safe reports\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(!unsafe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\nMatches. \n\n\n## Part 2\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       macOS Sonoma 14.6.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Los_Angeles\n date     2024-12-02\n pandoc   3.1.11 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package    * version    date (UTC) lib source\n aochelpers * 0.1.0.9000 2024-12-02 [1] Github (EllaKaye/aochelpers@d4ccd91)\n\n [1] /Users/rdonatello/Library/R/arm64/4.4/library\n [2] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}